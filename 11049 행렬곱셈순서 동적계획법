import Foundation

let n = Int(readLine()!)!
var arr = Array(repeating: Array(repeating: 0, count: 2), count: 504) //arr은 행렬을 담는 배열이다
var dp = Array(repeating: Array(repeating: 0, count: 504), count: 504)

for i in 1...n {
    let input = readLine()!.split(separator: " ")
    arr[i][0] = Int(input[0])!
    arr[i][1] = Int(input[1])!
}

//d로 거리를 측정한다 행렬과 행렬사이
for d in 1..<n {
    for x in 1...(n-d){
        let y = x+d
        dp[x][y] = Int.max
        //행렬과 행렬사이를 나누는 mid라는 것을 작성하여서 분할을 하여주었다
        for mid in x...y{
            dp[x][y] = min(dp[x][y],dp[x][mid]+dp[mid+1][y]+arr[x][0]*arr[mid][1]*arr[y][1])
        }
    }
}
print(dp[1][n])


//재귀로 작성 (시간초과)
/*
import Foundation

let n = Int(readLine()!)!
var arr = Array(repeating: Array(repeating: 0, count: 2), count: 501) //arr은 행렬을 담는 배열이다
var dp = Array(repeating: Array(repeating: -1, count: 501), count: 501)

for i in 1...n {
    let input = readLine()!.split(separator: " ")
    arr[i][0] = Int(input[0])!
    arr[i][1] = Int(input[1])!
}

func divide(_ x : Int, _ y : Int) -> Int {
    
    if x == y {return 0}
    if x+1 == y {
        return arr[x][0] * arr[x][1] * arr[y][1]
    }
    var ans = dp[x][y]
    
    for k in x..<y {
        let temp = divide(x, k) + divide(k+1, y) + arr[x][0] * arr[k][1] * arr[y][1]
        if ans == -1 || ans > temp {
            ans = temp
        }
    }
    return ans
}

print(divide(1, n))


*/
