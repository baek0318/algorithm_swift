import Foundation

struct Position {
    var x : Int
    var y : Int
    var breaking : Bool
    var count : Int
}

let input = readLine()!.split(separator: " ").map{Int($0)!}
let px = [1, -1, 0, 0]
let py = [0, 0, -1, 1]
var maze = Array(repeating: Array(repeating: 0, count: 1001), count:1001)
var queue = [Position]()
var ans = Int.max

for i in 0..<input[0] {
    let put = readLine()!
    var j = 0
    for k in put {
        maze[i][j] = Int(String(k))!
        j+=1
    }
}

func bfs(_ x : Int, _ y : Int) -> Int {
    
    queue.append(Position(x: x-1, y: y-1, breaking: false, count: 0))
    
    while !queue.isEmpty {
        
        var value = queue.removeFirst()
        
        maze[value.x][value.y] = 2
        value.count += 1
        
        if value.x == input[0]-1 && value.y == input[1]-1 {
            return value.count
        }
        
        for i in 0...3 {
            let nx = value.x+px[i]
            let ny = value.y+py[i]
            if value.breaking == false {
                if nx >= 0 && ny >= 0 && nx < input[0] && ny < input[1] && (maze[nx][ny] == 0 || maze[nx][ny] == 1) {
                    if maze[nx][ny] == 1 {
                        queue.append(Position(x: nx, y: ny, breaking: true, count: value.count))
                    }else {
                        queue.append(Position(x: nx, y: ny, breaking: value.breaking, count: value.count))
                    }
                    
                }
            }else {
                if nx >= 0 && ny >= 0 && nx < input[0] && ny < input[1] && maze[nx][ny] == 0 {
                    queue.append(Position(x: nx, y: ny, breaking: value.breaking, count: value.count))
                    
                }
            }
        }
        
    }
    return -1
}

print(bfs(1, 1))


