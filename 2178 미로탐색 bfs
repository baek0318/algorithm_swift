import Foundation

struct Distance {
    var x : Int
    var y : Int
    var dis : Int
}
let input = readLine()!.split(separator: " ").map{Int($0)!}
let n = input[0]
let m = input[1]
let dx = [-1, 1, 0, 0]
let dy = [0, 0, 1, -1]
var maze : [[Int]] = Array(repeating: Array(repeating: 0, count: input[1]+1), count: input[0]+1)
var count = 0
var queue : [Distance] = []

for i in 1...input[0]{
    var str = readLine()!
    for j in 0..<input[1]{
        maze[i][j+1] = Int(String(str.removeFirst()))!
    }
    str.removeAll()
}

func bfs(x : Int, y : Int) {
    queue.append(Distance(x: 1, y: 1, dis: 0))
    
    while(true) {
        if queue.count == 0 {break}
        
        let node = queue.removeFirst()
        
        for i in 0...3 {
            let new_x = node.x+dx[i]
            let new_y = node.y+dy[i]
            if (new_y > 0 && new_x > 0 && new_x <= n && new_y <= m && maze[new_x][new_y] == 1) {
                queue.append(Distance(x: new_x, y: new_y, dis: node.dis+1))
                maze[new_x][new_y] = 0
            }
            if new_x == n && new_y == m {
                for i in queue {
                    if i.x == n && i.y == m {
                        print(i.dis+1)
                        return
                    }
                }
            }
        }
    }
}

bfs(x: 1, y: 1)
