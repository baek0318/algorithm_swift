import Foundation

struct Calculate {
    var type : String
    var num : Int
    var check : Bool
}
let input = Int(readLine()!)!
let arr = readLine()!.split(separator: " ").map{Int($0)!}
let cal = readLine()!.split(separator: " ").map{Int($0)!}
var cal_arr = [Calculate]()
var result = [Calculate]()
var answer = 0
var a = [Int]()

for i in 0..<cal.count {
    for j in 0..<cal[i]{
        if i == 0 {
            cal_arr.append(Calculate(type: "+", num: j+1, check: false))
        }else if i == 1 {
            cal_arr.append(Calculate(type: "-", num: j+1, check: false))
        }else if i == 2 {
            cal_arr.append(Calculate(type: "*", num: j+1, check: false))
        }else if i == 3 {
            cal_arr.append(Calculate(type: "/", num: j+1, check: false))
        }
    }
}

func dfs(_ count: Int){
    if count == cal_arr.count {
        for i in 0..<arr.count-1 {
            if result[i].type == "+"{
                if i == 0 {
                    answer += arr[i] + arr[i+1]
                }else{
                    answer += arr[i+1]
                }
            }
            else if result[i].type == "-"{
                if i == 0 {
                    answer += arr[i] - arr[i+1]
                }else{
                    answer -= arr[i+1]
                }
            }
            else if result[i].type == "*"{
                if i == 0 {
                    answer += arr[i] * arr[i+1]
                }else{
                    answer *= arr[i+1]
                }
            }
            else if result[i].type == "/"{
                if i == 0 {
                    answer += arr[i] / arr[i+1]
                }else{
                    answer /= arr[i+1]
                }
            }
        }
        a.append(answer)
        answer = 0
        return
    }
    
    for i in 0..<cal_arr.count {
        if cal_arr[i].check {continue}
        cal_arr[i].check = true
        result.append(cal_arr[i])
        dfs(count+1)
        result.removeLast()
        cal_arr[i].check = false
        
    }
}

dfs(0)
print(a.max()!)
print(a.min()!)
