import Foundation

struct Position {
    var x : Int
    var y : Int
    var day : Int
}

let input = readLine()!.split(separator: " ").map{Int($0)!}
let m = input[0] //열
let n = input[1] //행
var tomato = [[Int]]()
var queue = [Position]()
let px = [1, -1, 0, 0]
let py = [0, 0, -1, 1]
var value : Position = Position(x: 0, y: 0, day: 0)
var count = 0

for i in 0..<n {
    let put = readLine()!.split(separator: " ").map{Int($0)!}
    tomato.append(put)
    count += put.filter{$0 == 0}.count
    for j in 0..<put.count {
        if put[j] == 1 {
            queue.append(Position(x: i, y: j, day: 0))
        }
    }
}

func bfs() -> Int {
    
    while !queue.isEmpty {
        
        value = queue.removeFirst()
    
        for i in 0...3 {
            let nx = value.x+px[i]
            let ny = value.y+py[i]
            if nx >= 0 && ny >= 0 && nx < n && ny < m && tomato[nx][ny] == 0{
                tomato[nx][ny] = 2
                queue.append(Position(x: nx, y: ny, day: value.day+1))
                count-=1
            }
        }
    }
    return value.day
}

if queue.isEmpty {
    print(-1)
}
else if queue.count == n*m {
    print(0)
}else {
    let ans = bfs()
    if count != 0 {
        print(-1)
    }else {
        print(ans)
    }
}
